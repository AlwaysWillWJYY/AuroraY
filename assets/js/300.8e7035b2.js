(window.webpackJsonp=window.webpackJsonp||[]).push([[300],{758:function(e,n,i){"use strict";i.r(n);var r=i(1),v=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"spring框架"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring框架"}},[e._v("#")]),e._v(" Spring框架")]),e._v(" "),n("p",[n("strong",[e._v("1、IOC和AOP原理")])]),e._v(" "),n("p",[e._v("IOC（Inversion of Control）是一种设计模式，也称为依赖注入（Dependency Injection），它的主要思想是将对象的创建和管理交给外部容器（IOC容器）来完成，而不是由对象自身来完成。这样可以让程序的不同组件之间解耦，降低了代码的复杂度和耦合度。")]),e._v(" "),n("p",[e._v("IOC的核心是IOC容器，它负责管理应用中的对象。当一个对象需要另一个对象时，它不会直接创建这个对象，而是通过IOC容器来获取。IOC容器会负责创建、销毁和管理这些对象，同时也会自动地解决对象之间的依赖关系。")]),e._v(" "),n("p",[e._v("AOP（Aspect-Oriented Programming）是另一种编程思想，它的主要思想是通过将横切关注点（cross-cutting concerns）从核心业务逻辑中分离出来，实现代码的重用和复用。AOP的核心是切面（Aspect），它可以在不修改源代码的情况下，动态地为程序添加新的功能或行为。")]),e._v(" "),n("p",[e._v("AOP的实现原理是通过动态代理来实现的。当程序运行时，AOP框架会动态地创建一个代理对象，这个代理对象可以在原始对象的方法执行前、执行后或者抛出异常时执行特定的逻辑。这些逻辑被封装在切面中，可以在多个对象中共享和重用。")]),e._v(" "),n("p",[e._v("总的来说，IOC和AOP都是面向对象编程中非常重要的概念，它们能够帮助程序员更好地组织代码、降低耦合度、提高代码的可读性和可维护性。")]),e._v(" "),n("p",[n("strong",[e._v("2、SpringMVC的执行流程？")])]),e._v(" "),n("p",[e._v("SpringMVC 是一个基于 MVC 设计模式的 Web 框架，它将整个 Web 请求处理流程进行了抽象和封装，通过统一的入口（DispatcherServlet）来进行请求的处理和响应的返回，使得开发者只需要关注业务逻辑的实现即可。")]),e._v(" "),n("p",[e._v("下面是 SpringMVC 的请求处理流程：")]),e._v(" "),n("ol",[n("li",[e._v("客户端发送请求到 DispatcherServlet，DispatcherServlet 是整个 SpringMVC 的中央控制器，负责接收客户端的所有请求，并将请求分发给对应的处理器进行处理。")]),e._v(" "),n("li",[e._v("DispatcherServlet 根据请求的 URL 和处理器映射器（HandlerMapping）找到对应的处理器（Handler），处理器是真正处理请求的地方，它会根据请求的参数进行业务逻辑的处理。")]),e._v(" "),n("li",[e._v("处理器执行业务逻辑后，将处理结果封装到一个 ModelAndView 对象中，并返回给 DispatcherServlet。")]),e._v(" "),n("li",[e._v('DispatcherServlet 接收到处理器返回的 ModelAndView 对象后，会根据视图解析器（ViewResolver）将 ModelAndView 中的逻辑视图名（例如："hello"）解析为物理视图（例如："/WEB-INF/jsp/hello.jsp"），并将视图渲染后返回给客户端。')]),e._v(" "),n("li",[e._v("客户端接收到服务器返回的响应结果，显示在浏览器中。")])]),e._v(" "),n("p",[e._v("整个流程可以简化为：")]),e._v(" "),n("p",[e._v("请求 --\x3e DispatcherServlet --\x3e 处理器 --\x3e ModelAndView --\x3e 视图解析器 --\x3e 物理视图 --\x3e 响应")]),e._v(" "),n("p",[n("strong",[e._v("3、spring生命周期、作用域？")])]),e._v(" "),n("p",[e._v("Spring Framework 是一个开源的 Java 应用程序框架，提供了丰富的特性和功能，其中一个重要的概念是 Spring Bean 的生命周期和作用域。")]),e._v(" "),n("p",[e._v("Spring Bean 的生命周期包含以下几个阶段：")]),e._v(" "),n("ol",[n("li",[e._v("实例化（Instantiation）：Spring 容器根据配置信息创建一个 Bean 的实例，这个实例可以是一个普通的 Java 类，也可以是一个由 Spring 容器管理的特殊对象。")]),e._v(" "),n("li",[e._v("属性赋值（Population）：Spring 容器会将 Bean 实例中的属性赋值，可以通过构造函数注入或 setter 方法注入等方式完成。")]),e._v(" "),n("li",[e._v("初始化（Initialization）：在 Bean 的所有属性都设置完毕后，Spring 容器会调用 Bean 的初始化方法，可以通过实现 InitializingBean 接口或在配置文件中指定 init-method 方法来实现。")]),e._v(" "),n("li",[e._v("使用（Using）：Bean 实例初始化完成后，就可以使用了，包括注入到其他 Bean 中或从容器中获取使用。")]),e._v(" "),n("li",[e._v("销毁（Destruction）：当 Spring 容器关闭时，会销毁所有的 Bean 实例，可以通过实现 DisposableBean 接口或在配置文件中指定 destroy-method 方法来实现。")])]),e._v(" "),n("p",[e._v("Spring Bean 的作用域指的是 Bean 实例的生命周期范围，Spring 提供了以下几种作用域：")]),e._v(" "),n("ol",[n("li",[e._v("singleton：在整个应用程序中只创建一个 Bean 实例，每次获取都返回同一个实例。")]),e._v(" "),n("li",[e._v("prototype：每次请求创建一个新的 Bean 实例。")]),e._v(" "),n("li",[e._v("request：在一次 HTTP 请求中创建一个 Bean 实例，该实例在整个请求中共享。")]),e._v(" "),n("li",[e._v("session：在一个 HTTP Session 中创建一个 Bean 实例，该实例在整个 Session 中共享。")]),e._v(" "),n("li",[e._v("global session：在一个全局的 HTTP Session 中创建一个 Bean 实例，仅适用于基于 Portlet 的 Web 应用程序。")])]),e._v(" "),n("p",[n("strong",[e._v("4、Spring和SpringBoot的对比？")])]),e._v(" "),n("p",[e._v("Spring和Spring Boot都是基于Java平台的开源框架，用于开发企业级应用程序。以下是它们之间的主要区别：")]),e._v(" "),n("ol",[n("li",[e._v("Spring是一个庞大的框架，提供了许多模块来支持不同类型的应用程序开发，例如Spring MVC、Spring Data、Spring Security等。Spring Boot是建立在Spring框架之上的快速应用程序开发框架，提供了自动配置和快速启动的能力。")]),e._v(" "),n("li",[e._v("在使用Spring时，您需要手动配置和管理应用程序的依赖项和配置。但是，Spring Boot使用“约定优于配置”的理念，通过自动配置和自动装配，减少了对开发人员的工作量。")]),e._v(" "),n("li",[e._v("Spring可以与多种Web框架（如Spring MVC、Struts等）集成，以及多种ORM框架（如Hibernate、MyBatis等）集成。Spring Boot内置了Spring MVC，可以轻松集成其他框架（如Thymeleaf、Freemarker等）。")]),e._v(" "),n("li",[e._v("Spring需要显式配置Java EE容器（如Tomcat、Jetty等）以运行应用程序。而Spring Boot提供了内嵌的Tomcat、Jetty等容器，不需要外部容器即可运行应用程序。")])]),e._v(" "),n("p",[e._v("总之，Spring是一个庞大的框架，需要手动配置和管理依赖项和配置，而Spring Boot则是一种快速应用程序开发框架，通过自动配置和自动装配，大大减少了开发人员的工作量。")]),e._v(" "),n("p",[e._v("动态代理.注解(参考笔记)")])])}),[],!1,null,null,null);n.default=v.exports}}]);