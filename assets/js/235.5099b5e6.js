(window.webpackJsonp=window.webpackJsonp||[]).push([[235],{693:function(_,v,e){"use strict";e.r(v);var o=e(1),r=Object(o.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"什么是zookeeper"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是zookeeper"}},[_._v("#")]),_._v(" 什么是ZooKeeper")]),_._v(" "),v("p",[v("code",[_._v("ZooKeeper")]),_._v(" 由 "),v("code",[_._v("Yahoo")]),_._v(" 开发，后来捐赠给了 "),v("code",[_._v("Apache")]),_._v(" ，现已成为 "),v("code",[_._v("Apache")]),_._v(" 顶级项目。"),v("code",[_._v("ZooKeeper")]),_._v(" 是一个开源的分布式应用程序协调服务器，其为分布式系统提供一致性服务。其一致性是通过基于 "),v("code",[_._v("Paxos")]),_._v(" 算法的 "),v("code",[_._v("ZAB")]),_._v(" 协议完成的。其主要功能包括：配置维护、分布式同步、集群管理、分布式事务等。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/7c349891b773671514a68f057b2e14f8.png",alt:"zookeeper"}})]),_._v(" "),v("p",[_._v("简单来说， "),v("code",[_._v("ZooKeeper")]),_._v(" 是一个 "),v("strong",[_._v("分布式协调服务框架")]),_._v(" 。分布式？协调服务？这啥玩意？🤔🤔")]),_._v(" "),v("p",[_._v("其实解释到分布式这个概念的时候，我发现有些同学并不是能把 "),v("strong",[_._v("分布式和集群")]),_._v(" 这两个概念很好的理解透。前段时间有同学和我探讨起分布式的东西，他说分布式不就是加机器吗？一台机器不够用再加一台抗压呗。当然加机器这种说法也无可厚非，你一个分布式系统必定涉及到多个机器，但是你别忘了，计算机学科中还有一个相似的概念—— "),v("code",[_._v("Cluster")]),_._v(" ，集群不也是加机器吗？但是 集群 和 分布式 其实就是两个完全不同的概念。")]),_._v(" "),v("p",[_._v("比如，我现在有一个秒杀服务，并发量太大单机系统承受不住，那我加几台服务器也 "),v("strong",[_._v("一样")]),_._v(" 提供秒杀服务，这个时候就是 "),v("strong",[v("code",[_._v("Cluster")]),_._v(" 集群")]),_._v(" 。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/ffcb080eb66f242ffcd8d2047a7f46aa.png",alt:"cluster"}})]),_._v(" "),v("p",[_._v("但是，我现在换一种方式，我将一个秒杀服务 "),v("strong",[_._v("拆分成多个子服务")]),_._v(" ，比如创建订单服务，增加积分服务，扣优惠券服务等等，"),v("strong",[_._v("然后我将这些子服务都部署在不同的服务器上")]),_._v(" ，这个时候就是 "),v("strong",[v("code",[_._v("Distributed")]),_._v(" 分布式")]),_._v(" 。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/07191f38aa947b0075e5c0a6a019a11d.png",alt:"distributed"}})]),_._v(" "),v("p",[_._v("而我为什么反驳同学所说的分布式就是加机器呢？因为我认为加机器更加适用于构建集群，因为它真是只有加机器。而对于分布式来说，你首先需要将业务进行拆分，然后再加机器（不仅仅是加机器那么简单），同时你还要去解决分布式带来的一系列问题。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/2b2fbc21abfb3f6547a2121f28c6d00f.png",alt:"img"}})]),_._v(" "),v("p",[_._v("比如各个分布式组件如何协调起来，如何减少各个系统之间的耦合度，分布式事务的处理，如何去配置整个分布式系统等等。"),v("code",[_._v("ZooKeeper")]),_._v(" 主要就是解决这些问题的。")]),_._v(" "),v("h2",{attrs:{id:"_3-一致性问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-一致性问题"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_3-%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98"}},[_._v("#")]),_._v(" 3. 一致性问题")]),_._v(" "),v("p",[_._v("设计一个分布式系统必定会遇到一个问题—— "),v("strong",[_._v("因为分区容忍性（partition tolerance）的存在，就必定要求我们需要在系统可用性（availability）和数据一致性（consistency）中做出权衡")]),_._v(" 。这就是著名的 "),v("code",[_._v("CAP")]),_._v(" 定理。")]),_._v(" "),v("p",[_._v("理解起来其实很简单，比如说把一个班级作为整个系统，而学生是系统中的一个个独立的子系统。这个时候班里的小红小明偷偷谈恋爱被班里的大嘴巴小花发现了，小花欣喜若狂告诉了周围的人，然后小红小明谈恋爱的消息在班级里传播起来了。当在消息的传播（散布）过程中，你抓到一个同学问他们的情况，如果回答你不知道，那么说明整个班级系统出现了数据不一致的问题（因为小花已经知道这个消息了）。而如果他直接不回答你，因为整个班级有消息在进行传播（为了保证一致性，需要所有人都知道才可提供服务），这个时候就出现了系统的可用性问题。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/34ffff41f6ca4f221ca9d9ad6f0b5470.png",alt:"img"}})]),_._v(" "),v("p",[_._v("而上述前者就是 "),v("code",[_._v("Eureka")]),_._v(" 的处理方式，它保证了AP（可用性），后者就是我们今天所要讲的 "),v("code",[_._v("ZooKeeper")]),_._v(" 的处理方式，它保证了CP（数据一致性）。")]),_._v(" "),v("h2",{attrs:{id:"_4-一致性协议和算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-一致性协议和算法"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_4-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%E5%92%8C%E7%AE%97%E6%B3%95"}},[_._v("#")]),_._v(" 4. 一致性协议和算法")]),_._v(" "),v("p",[_._v("而为了解决数据一致性问题，在科学家和程序员的不断探索中，就出现了很多的一致性协议和算法。比如 2PC（两阶段提交），3PC（三阶段提交），Paxos算法等等。")]),_._v(" "),v("p",[_._v("这时候请你思考一个问题，同学之间如果采用传纸条的方式去传播消息，那么就会出现一个问题——我咋知道我的小纸条有没有传到我想要传递的那个人手中呢？万一被哪个小家伙给劫持篡改了呢，对吧？")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/b0e01fe3213dcc1535c31298ba9bdfbc.png",alt:"img"}})]),_._v(" "),v("p",[_._v("这个时候就引申出一个概念—— "),v("strong",[_._v("拜占庭将军问题")]),_._v(" 。它意指 "),v("strong",[_._v("在不可靠信道上试图通过消息传递的方式达到一致性是不可能的")]),_._v("， 所以所有的一致性算法的 "),v("strong",[_._v("必要前提")]),_._v(" 就是安全可靠的消息通道。")]),_._v(" "),v("p",[_._v("而为什么要去解决数据一致性的问题？你想想，如果一个秒杀系统将服务拆分成了下订单和加积分服务，这两个服务部署在不同的机器上了，万一在消息的传播过程中积分系统宕机了，总不能你这边下了订单却没加积分吧？你总得保证两边的数据需要一致吧？")]),_._v(" "),v("h3",{attrs:{id:"_4-1-2pc-两阶段提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2pc-两阶段提交"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_4-1-2pc-%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4"}},[_._v("#")]),_._v(" 4.1. 2PC（两阶段提交）")]),_._v(" "),v("p",[_._v("两阶段提交是一种保证分布式系统数据一致性的协议，现在很多数据库都是采用的两阶段提交协议来完成 "),v("strong",[_._v("分布式事务")]),_._v(" 的处理。")]),_._v(" "),v("p",[_._v("在介绍2PC之前，我们先来想想分布式事务到底有什么问题呢？")]),_._v(" "),v("p",[_._v("还拿秒杀系统的下订单和加积分两个系统来举例吧（我想你们可能都吐了🤮🤮🤮），我们此时下完订单会发个消息给积分系统告诉它下面该增加积分了。如果我们仅仅是发送一个消息也不收回复，那么我们的订单系统怎么能知道积分系统的收到消息的情况呢？如果我们增加一个收回复的过程，那么当积分系统收到消息后返回给订单系统一个 "),v("code",[_._v("Response")]),_._v(" ，但在中间出现了网络波动，那个回复消息没有发送成功，订单系统是不是以为积分系统消息接收失败了？它是不是会回滚事务？但此时积分系统是成功收到消息的，它就会去处理消息然后给用户增加积分，这个时候就会出现积分加了但是订单没下成功。")]),_._v(" "),v("p",[_._v("所以我们所需要解决的是在分布式系统中，整个调用链中，我们所有服务的数据处理要么都成功要么都失败，即所有服务的 "),v("strong",[_._v("原子性问题")]),_._v(" 。")]),_._v(" "),v("p",[_._v("在两阶段提交中，主要涉及到两个角色，分别是协调者和参与者。")]),_._v(" "),v("p",[_._v("第一阶段：当要执行一个分布式事务的时候，事务发起者首先向协调者发起事务请求，然后协调者会给所有参与者发送 "),v("code",[_._v("prepare")]),_._v(" 请求（其中包括事务内容）告诉参与者你们需要执行事务了，如果能执行我发的事务内容那么就先执行但不提交，执行后请给我回复。然后参与者收到 "),v("code",[_._v("prepare")]),_._v(" 消息后，他们会开始执行事务（但不提交），并将 "),v("code",[_._v("Undo")]),_._v(" 和 "),v("code",[_._v("Redo")]),_._v(" 信息记入事务日志中，之后参与者就向协调者反馈是否准备好了。")]),_._v(" "),v("p",[_._v("第二阶段：第二阶段主要是协调者根据参与者反馈的情况来决定接下来是否可以进行事务的提交操作，即提交事务或者回滚事务。")]),_._v(" "),v("p",[_._v("比如这个时候 "),v("strong",[_._v("所有的参与者")]),_._v(" 都返回了准备好了的消息，这个时候就进行事务的提交，协调者此时会给所有的参与者发送 "),v("strong",[v("code",[_._v("Commit")]),_._v(" 请求")]),_._v(" ，当参与者收到 "),v("code",[_._v("Commit")]),_._v(" 请求的时候会执行前面执行的事务的 "),v("strong",[_._v("提交操作")]),_._v(" ，提交完毕之后将给协调者发送提交成功的响应。")]),_._v(" "),v("p",[_._v("而如果在第一阶段并不是所有参与者都返回了准备好了的消息，那么此时协调者将会给所有参与者发送 "),v("strong",[_._v("回滚事务的 "),v("code",[_._v("rollback")]),_._v(" 请求")]),_._v("，参与者收到之后将会 "),v("strong",[_._v("回滚它在第一阶段所做的事务处理")]),_._v(" ，然后再将处理情况返回给协调者，最终协调者收到响应后便给事务发起者返回处理失败的结果。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/7ce4e40b68d625676bb42c29efce046a.png",alt:"2PC流程"}})]),_._v(" "),v("p",[_._v("个人觉得 2PC 实现得还是比较鸡肋的，因为事实上它只解决了各个事务的原子性问题，随之也带来了很多的问题。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/9af1ad68517561a8e9f5d3455a32132d.png",alt:"img"}})]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("单点故障问题")]),_._v("，如果协调者挂了那么整个系统都处于不可用的状态了。")]),_._v(" "),v("li",[v("strong",[_._v("阻塞问题")]),_._v("，即当协调者发送 "),v("code",[_._v("prepare")]),_._v(" 请求，参与者收到之后如果能处理那么它将会进行事务的处理但并不提交，这个时候会一直占用着资源不释放，如果此时协调者挂了，那么这些资源都不会再释放了，这会极大影响性能。")]),_._v(" "),v("li",[v("strong",[_._v("数据不一致问题")]),_._v("，比如当第二阶段，协调者只发送了一部分的 "),v("code",[_._v("commit")]),_._v(" 请求就挂了，那么也就意味着，收到消息的参与者会进行事务的提交，而后面没收到的则不会进行事务提交，那么这时候就会产生数据不一致性问题。")])]),_._v(" "),v("h3",{attrs:{id:"_4-2-3pc-三阶段提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3pc-三阶段提交"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_4-2-3pc-%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4"}},[_._v("#")]),_._v(" 4.2. 3PC（三阶段提交）")]),_._v(" "),v("p",[_._v("因为2PC存在的一系列问题，比如单点，容错机制缺陷等等，从而产生了 "),v("strong",[_._v("3PC（三阶段提交）")]),_._v(" 。那么这三阶段又分别是什么呢？")]),_._v(" "),v("blockquote",[v("p",[_._v("千万不要吧PC理解成个人电脑了，其实他们是 phase-commit 的缩写，即阶段提交。")])]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("CanCommit阶段")]),_._v("：协调者向所有参与者发送 "),v("code",[_._v("CanCommit")]),_._v(" 请求，参与者收到请求后会根据自身情况查看是否能执行事务，如果可以则返回 YES 响应并进入预备状态，否则返回 NO 。")]),_._v(" "),v("li",[v("strong",[_._v("PreCommit阶段")]),_._v("：协调者根据参与者返回的响应来决定是否可以进行下面的 "),v("code",[_._v("PreCommit")]),_._v(" 操作。如果上面参与者返回的都是 YES，那么协调者将向所有参与者发送 "),v("code",[_._v("PreCommit")]),_._v(" 预提交请求，"),v("strong",[_._v("参与者收到预提交请求后，会进行事务的执行操作，并将 "),v("code",[_._v("Undo")]),_._v(" 和 "),v("code",[_._v("Redo")]),_._v(" 信息写入事务日志中")]),_._v(" ，最后如果参与者顺利执行了事务则给协调者返回成功的响应。如果在第一阶段协调者收到了 "),v("strong",[_._v("任何一个 NO")]),_._v(" 的信息，或者 "),v("strong",[_._v("在一定时间内")]),_._v(" 并没有收到全部的参与者的响应，那么就会中断事务，它会向所有参与者发送中断请求（abort），参与者收到中断请求之后会立即中断事务，或者在一定时间内没有收到协调者的请求，它也会中断事务。")]),_._v(" "),v("li",[v("strong",[_._v("DoCommit阶段")]),_._v("：这个阶段其实和 "),v("code",[_._v("2PC")]),_._v(" 的第二阶段差不多，如果协调者收到了所有参与者在 "),v("code",[_._v("PreCommit")]),_._v(" 阶段的 YES 响应，那么协调者将会给所有参与者发送 "),v("code",[_._v("DoCommit")]),_._v(" 请求，"),v("strong",[_._v("参与者收到 "),v("code",[_._v("DoCommit")]),_._v(" 请求后则会进行事务的提交工作")]),_._v("，完成后则会给协调者返回响应，协调者收到所有参与者返回的事务提交成功的响应之后则完成事务。若协调者在 "),v("code",[_._v("PreCommit")]),_._v(" 阶段 "),v("strong",[_._v("收到了任何一个 NO 或者在一定时间内没有收到所有参与者的响应")]),_._v(" ，那么就会进行中断请求的发送，参与者收到中断请求后则会 "),v("strong",[_._v("通过上面记录的回滚日志")]),_._v(" 来进行事务的回滚操作，并向协调者反馈回滚状况，协调者收到参与者返回的消息后，中断事务。")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/d0b44361c746593f70a6e42c298b413a.png",alt:"3PC流程"}})]),_._v(" "),v("blockquote",[v("p",[_._v("这里是 "),v("code",[_._v("3PC")]),_._v(" 在成功的环境下的流程图，你可以看到 "),v("code",[_._v("3PC")]),_._v(" 在很多地方进行了超时中断的处理，比如协调者在指定时间内为收到全部的确认消息则进行事务中断的处理，这样能 "),v("strong",[_._v("减少同步阻塞的时间")]),_._v(" 。还有需要注意的是，"),v("strong",[v("code",[_._v("3PC")]),_._v(" 在 "),v("code",[_._v("DoCommit")]),_._v(" 阶段参与者如未收到协调者发送的提交事务的请求，它会在一定时间内进行事务的提交")]),_._v("。为什么这么做呢？是因为这个时候我们肯定"),v("strong",[_._v("保证了在第一阶段所有的协调者全部返回了可以执行事务的响应")]),_._v("，这个时候我们有理由"),v("strong",[_._v("相信其他系统都能进行事务的执行和提交")]),_._v("，所以"),v("strong",[_._v("不管")]),_._v("协调者有没有发消息给参与者，进入第三阶段参与者都会进行事务的提交操作。")])]),_._v(" "),v("p",[_._v("总之，"),v("code",[_._v("3PC")]),_._v(" 通过一系列的超时机制很好的缓解了阻塞问题，但是最重要的一致性并没有得到根本的解决，比如在 "),v("code",[_._v("PreCommit")]),_._v(" 阶段，当一个参与者收到了请求之后其他参与者和协调者挂了或者出现了网络分区，这个时候收到消息的参与者都会进行事务提交，这就会出现数据不一致性问题。")]),_._v(" "),v("p",[_._v("所以，要解决一致性问题还需要靠 "),v("code",[_._v("Paxos")]),_._v(" 算法⭐️ ⭐️ ⭐️ 。")]),_._v(" "),v("h3",{attrs:{id:"_4-3-paxos-算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-paxos-算法"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_4-3-paxos-%E7%AE%97%E6%B3%95"}},[_._v("#")]),_._v(" 4.3. "),v("code",[_._v("Paxos")]),_._v(" 算法")]),_._v(" "),v("p",[v("code",[_._v("Paxos")]),_._v(" 算法是基于"),v("strong",[_._v("消息传递且具有高度容错特性的一致性算法")]),_._v("，是目前公认的解决分布式一致性问题最有效的算法之一，"),v("strong",[_._v("其解决的问题就是在分布式系统中如何就某个值（决议）达成一致")]),_._v(" 。")]),_._v(" "),v("p",[_._v("在 "),v("code",[_._v("Paxos")]),_._v(" 中主要有三个角色，分别为 "),v("code",[_._v("Proposer提案者")]),_._v("、"),v("code",[_._v("Acceptor表决者")]),_._v("、"),v("code",[_._v("Learner学习者")]),_._v("。"),v("code",[_._v("Paxos")]),_._v(" 算法和 "),v("code",[_._v("2PC")]),_._v(" 一样，也有两个阶段，分别为 "),v("code",[_._v("Prepare")]),_._v(" 和 "),v("code",[_._v("accept")]),_._v(" 阶段。")]),_._v(" "),v("h4",{attrs:{id:"_4-3-1-prepare-阶段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-prepare-阶段"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_4-3-1-prepare-%E9%98%B6%E6%AE%B5"}},[_._v("#")]),_._v(" 4.3.1. prepare 阶段")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("Proposer提案者")]),_._v("：负责提出 "),v("code",[_._v("proposal")]),_._v("，每个提案者在提出提案时都会首先获取到一个 "),v("strong",[_._v("具有全局唯一性的、递增的提案编号N")]),_._v("，即在整个集群中是唯一的编号 N，然后将该编号赋予其要提出的提案，在"),v("strong",[_._v("第一阶段是只将提案编号发送给所有的表决者")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("Acceptor表决者")]),_._v("：每个表决者在 "),v("code",[_._v("accept")]),_._v(" 某提案后，会将该提案编号N记录在本地，这样每个表决者中保存的已经被 accept 的提案中会存在一个"),v("strong",[_._v("编号最大的提案")]),_._v("，其编号假设为 "),v("code",[_._v("maxN")]),_._v("。每个表决者仅会 "),v("code",[_._v("accept")]),_._v(" 编号大于自己本地 "),v("code",[_._v("maxN")]),_._v(" 的提案，在批准提案时表决者会将以前接受过的最大编号的提案作为响应反馈给 "),v("code",[_._v("Proposer")]),_._v(" 。")])]),_._v(" "),v("blockquote",[v("p",[_._v("下面是 "),v("code",[_._v("prepare")]),_._v(" 阶段的流程图，你可以对照着参考一下。")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/22e8d512d954676bdf0cc92d200af8ef.png",alt:"paxos第一阶段"}})]),_._v(" "),v("h4",{attrs:{id:"_4-3-2-accept-阶段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-accept-阶段"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_4-3-2-accept-%E9%98%B6%E6%AE%B5"}},[_._v("#")]),_._v(" 4.3.2. accept 阶段")]),_._v(" "),v("p",[_._v("当一个提案被 "),v("code",[_._v("Proposer")]),_._v(" 提出后，如果 "),v("code",[_._v("Proposer")]),_._v(" 收到了超过半数的 "),v("code",[_._v("Acceptor")]),_._v(" 的批准（"),v("code",[_._v("Proposer")]),_._v(" 本身同意），那么此时 "),v("code",[_._v("Proposer")]),_._v(" 会给所有的 "),v("code",[_._v("Acceptor")]),_._v(" 发送真正的提案（你可以理解为第一阶段为试探），这个时候 "),v("code",[_._v("Proposer")]),_._v(" 就会发送提案的内容和提案编号。")]),_._v(" "),v("p",[_._v("表决者收到提案请求后会再次比较本身已经批准过的最大提案编号和该提案编号，如果该提案编号 "),v("strong",[_._v("大于等于")]),_._v(" 已经批准过的最大提案编号，那么就 "),v("code",[_._v("accept")]),_._v(" 该提案（此时执行提案内容但不提交），随后将情况返回给 "),v("code",[_._v("Proposer")]),_._v(" 。如果不满足则不回应或者返回 NO 。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/b82536f956f70a584c6a20c10113f225.png",alt:"paxos第二阶段1"}})]),_._v(" "),v("p",[_._v("当 "),v("code",[_._v("Proposer")]),_._v(" 收到超过半数的 "),v("code",[_._v("accept")]),_._v(" ，那么它这个时候会向所有的 "),v("code",[_._v("acceptor")]),_._v(" 发送提案的提交请求。需要注意的是，因为上述仅仅是超过半数的 "),v("code",[_._v("acceptor")]),_._v(" 批准执行了该提案内容，其他没有批准的并没有执行该提案内容，所以这个时候需要"),v("strong",[_._v("向未批准的 "),v("code",[_._v("acceptor")]),_._v(" 发送提案内容和提案编号并让它无条件执行和提交")]),_._v("，而对于前面已经批准过该提案的 "),v("code",[_._v("acceptor")]),_._v(" 来说 "),v("strong",[_._v("仅仅需要发送该提案的编号")]),_._v(" ，让 "),v("code",[_._v("acceptor")]),_._v(" 执行提交就行了。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/743889b97485fdfe2094e5ef0af6b141.png",alt:"paxos第二阶段2"}})]),_._v(" "),v("p",[_._v("而如果 "),v("code",[_._v("Proposer")]),_._v(" 如果没有收到超过半数的 "),v("code",[_._v("accept")]),_._v(" 那么它将会将 "),v("strong",[_._v("递增")]),_._v(" 该 "),v("code",[_._v("Proposal")]),_._v(" 的编号，然后 "),v("strong",[_._v("重新进入 "),v("code",[_._v("Prepare")]),_._v(" 阶段")]),_._v(" 。")]),_._v(" "),v("blockquote",[v("p",[_._v("对于 "),v("code",[_._v("Learner")]),_._v(" 来说如何去学习 "),v("code",[_._v("Acceptor")]),_._v(" 批准的提案内容，这有很多方式，读者可以自己去了解一下，这里不做过多解释。")])]),_._v(" "),v("h4",{attrs:{id:"_4-3-3-paxos-算法的死循环问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-paxos-算法的死循环问题"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_4-3-3-paxos-%E7%AE%97%E6%B3%95%E7%9A%84%E6%AD%BB%E5%BE%AA%E7%8E%AF%E9%97%AE%E9%A2%98"}},[_._v("#")]),_._v(" 4.3.3. "),v("code",[_._v("paxos")]),_._v(" 算法的死循环问题")]),_._v(" "),v("p",[_._v("其实就有点类似于两个人吵架，小明说我是对的，小红说我才是对的，两个人据理力争的谁也不让谁🤬🤬。")]),_._v(" "),v("p",[_._v("比如说，此时提案者 P1 提出一个方案 M1，完成了 "),v("code",[_._v("Prepare")]),_._v(" 阶段的工作，这个时候 "),v("code",[_._v("acceptor")]),_._v(" 则批准了 M1，但是此时提案者 P2 同时也提出了一个方案 M2，它也完成了 "),v("code",[_._v("Prepare")]),_._v(" 阶段的工作。然后 P1 的方案已经不能在第二阶段被批准了（因为 "),v("code",[_._v("acceptor")]),_._v(" 已经批准了比 M1 更大的 M2），所以 P1 自增方案变为 M3 重新进入 "),v("code",[_._v("Prepare")]),_._v(" 阶段，然后 "),v("code",[_._v("acceptor")]),_._v(" ，又批准了新的 M3 方案，它又不能批准 M2 了，这个时候 M2 又自增进入 "),v("code",[_._v("Prepare")]),_._v(" 阶段。。。")]),_._v(" "),v("p",[_._v("就这样无休无止的永远提案下去，这就是 "),v("code",[_._v("paxos")]),_._v(" 算法的死循环问题。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/72ccf65cdc107346ff2a1a881d296a2b.png",alt:"img"}})]),_._v(" "),v("p",[_._v("那么如何解决呢？很简单，人多了容易吵架，我现在 "),v("strong",[_._v("就允许一个能提案")]),_._v(" 就行了。")]),_._v(" "),v("h2",{attrs:{id:"_5-引出-zab"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-引出-zab"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_5-%E5%BC%95%E5%87%BA-zab"}},[_._v("#")]),_._v(" 5. 引出 "),v("code",[_._v("ZAB")])]),_._v(" "),v("h3",{attrs:{id:"_5-1-zookeeper-架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-zookeeper-架构"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_5-1-zookeeper-%E6%9E%B6%E6%9E%84"}},[_._v("#")]),_._v(" 5.1. "),v("code",[_._v("Zookeeper")]),_._v(" 架构")]),_._v(" "),v("p",[_._v("作为一个优秀高效且可靠的分布式协调框架，"),v("code",[_._v("ZooKeeper")]),_._v(" 在解决分布式数据一致性问题时并没有直接使用 "),v("code",[_._v("Paxos")]),_._v(" ，而是专门定制了一致性协议叫做 "),v("code",[_._v("ZAB(ZooKeeper Atomic Broadcast)")]),_._v(" 原子广播协议，该协议能够很好地支持 "),v("strong",[_._v("崩溃恢复")]),_._v(" 。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/0c38d08ea026e25bf3849cc7654a4e79.png",alt:"Zookeeper架构"}})]),_._v(" "),v("h3",{attrs:{id:"_5-2-zab-中的三个角色"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-zab-中的三个角色"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_5-2-zab-%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E8%A7%92%E8%89%B2"}},[_._v("#")]),_._v(" 5.2. "),v("code",[_._v("ZAB")]),_._v(" 中的三个角色")]),_._v(" "),v("p",[_._v("和介绍 "),v("code",[_._v("Paxos")]),_._v(" 一样，在介绍 "),v("code",[_._v("ZAB")]),_._v(" 协议之前，我们首先来了解一下在 "),v("code",[_._v("ZAB")]),_._v(" 中三个主要的角色，"),v("code",[_._v("Leader 领导者")]),_._v("、"),v("code",[_._v("Follower跟随者")]),_._v("、"),v("code",[_._v("Observer观察者")]),_._v(" 。")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("Leader")]),_._v(" ：集群中 "),v("strong",[_._v("唯一的写请求处理者")]),_._v(" ，能够发起投票（投票也是为了进行写请求）。")]),_._v(" "),v("li",[v("code",[_._v("Follower")]),_._v("：能够接收客户端的请求，如果是读请求则可以自己处理，"),v("strong",[_._v("如果是写请求则要转发给 "),v("code",[_._v("Leader")])]),_._v(" 。在选举过程中会参与投票，"),v("strong",[_._v("有选举权和被选举权")]),_._v(" 。")]),_._v(" "),v("li",[v("code",[_._v("Observer")]),_._v(" ：就是没有选举权和被选举权的 "),v("code",[_._v("Follower")]),_._v(" 。")])]),_._v(" "),v("p",[_._v("在 "),v("code",[_._v("ZAB")]),_._v(" 协议中对 "),v("code",[_._v("zkServer")]),_._v("(即上面我们说的三个角色的总称) 还有两种模式的定义，分别是 "),v("strong",[_._v("消息广播")]),_._v(" 和 "),v("strong",[_._v("崩溃恢复")]),_._v(" 。")]),_._v(" "),v("h3",{attrs:{id:"_5-3-消息广播模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-消息广播模式"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_5-3-%E6%B6%88%E6%81%AF%E5%B9%BF%E6%92%AD%E6%A8%A1%E5%BC%8F"}},[_._v("#")]),_._v(" 5.3. 消息广播模式")]),_._v(" "),v("p",[_._v("说白了就是 "),v("code",[_._v("ZAB")]),_._v(" 协议是如何处理写请求的，上面我们不是说只有 "),v("code",[_._v("Leader")]),_._v(" 能处理写请求嘛？那么我们的 "),v("code",[_._v("Follower")]),_._v(" 和 "),v("code",[_._v("Observer")]),_._v(" 是不是也需要 "),v("strong",[_._v("同步更新数据")]),_._v(" 呢？总不能数据只在 "),v("code",[_._v("Leader")]),_._v(" 中更新了，其他角色都没有得到更新吧？")]),_._v(" "),v("p",[_._v("不就是 "),v("strong",[_._v("在整个集群中保持数据的一致性")]),_._v(" 嘛？如果是你，你会怎么做呢？")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/e6064aea729dcc2d927d5d81c4797e74.png",alt:"img"}})]),_._v(" "),v("p",[_._v("废话，第一步肯定需要 "),v("code",[_._v("Leader")]),_._v(" 将写请求 "),v("strong",[_._v("广播")]),_._v(" 出去呀，让 "),v("code",[_._v("Leader")]),_._v(" 问问 "),v("code",[_._v("Followers")]),_._v(" 是否同意更新，如果超过半数以上的同意那么就进行 "),v("code",[_._v("Follower")]),_._v(" 和 "),v("code",[_._v("Observer")]),_._v(" 的更新（和 "),v("code",[_._v("Paxos")]),_._v(" 一样）。当然这么说有点虚，画张图理解一下。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/08ccce48190fe4edcbcbb223d6231876.png",alt:"消息广播"}})]),_._v(" "),v("p",[_._v("嗯。。。看起来很简单，貌似懂了🤥🤥🤥。这两个 "),v("code",[_._v("Queue")]),_._v(" 哪冒出来的？答案是 "),v("strong",[v("code",[_._v("ZAB")]),_._v(" 需要让 "),v("code",[_._v("Follower")]),_._v(" 和 "),v("code",[_._v("Observer")]),_._v(" 保证顺序性")]),_._v(" 。何为顺序性，比如我现在有一个写请求A，此时 "),v("code",[_._v("Leader")]),_._v(" 将请求A广播出去，因为只需要半数同意就行，所以可能这个时候有一个 "),v("code",[_._v("Follower")]),_._v(" F1因为网络原因没有收到，而 "),v("code",[_._v("Leader")]),_._v(" 又广播了一个请求B，因为网络原因，F1竟然先收到了请求B然后才收到了请求A，这个时候请求处理的顺序不同就会导致数据的不同，从而 "),v("strong",[_._v("产生数据不一致问题")]),_._v(" 。")]),_._v(" "),v("p",[_._v("所以在 "),v("code",[_._v("Leader")]),_._v(" 这端，它为每个其他的 "),v("code",[_._v("zkServer")]),_._v(" 准备了一个 "),v("strong",[_._v("队列")]),_._v(" ，采用先进先出的方式发送消息。由于协议是 "),v("strong",[_._v("通过 "),v("code",[_._v("TCP")])]),_._v(" 来进行网络通信的，保证了消息的发送顺序性，接受顺序性也得到了保证。")]),_._v(" "),v("p",[_._v("除此之外，在 "),v("code",[_._v("ZAB")]),_._v(" 中还定义了一个 "),v("strong",[_._v("全局单调递增的事务ID "),v("code",[_._v("ZXID")])]),_._v(" ，它是一个64位long型，其中高32位表示 "),v("code",[_._v("epoch")]),_._v(" 年代，低32位表示事务id。"),v("code",[_._v("epoch")]),_._v(" 是会根据 "),v("code",[_._v("Leader")]),_._v(" 的变化而变化的，当一个 "),v("code",[_._v("Leader")]),_._v(" 挂了，新的 "),v("code",[_._v("Leader")]),_._v(" 上位的时候，年代（"),v("code",[_._v("epoch")]),_._v("）就变了。而低32位可以简单理解为递增的事务id。")]),_._v(" "),v("p",[_._v("定义这个的原因也是为了顺序性，每个 "),v("code",[_._v("proposal")]),_._v(" 在 "),v("code",[_._v("Leader")]),_._v(" 中生成后需要 "),v("strong",[_._v("通过其 "),v("code",[_._v("ZXID")]),_._v(" 来进行排序")]),_._v(" ，才能得到处理。")]),_._v(" "),v("h3",{attrs:{id:"_5-4-崩溃恢复模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-崩溃恢复模式"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_5-4-%E5%B4%A9%E6%BA%83%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F"}},[_._v("#")]),_._v(" 5.4. 崩溃恢复模式")]),_._v(" "),v("p",[_._v("说到崩溃恢复我们首先要提到 "),v("code",[_._v("ZAB")]),_._v(" 中的 "),v("code",[_._v("Leader")]),_._v(" 选举算法，当系统出现崩溃影响最大应该是 "),v("code",[_._v("Leader")]),_._v(" 的崩溃，因为我们只有一个 "),v("code",[_._v("Leader")]),_._v(" ，所以当 "),v("code",[_._v("Leader")]),_._v(" 出现问题的时候我们势必需要重新选举 "),v("code",[_._v("Leader")]),_._v(" 。")]),_._v(" "),v("p",[v("code",[_._v("Leader")]),_._v(" 选举可以分为两个不同的阶段，第一个是我们提到的 "),v("code",[_._v("Leader")]),_._v(" 宕机需要重新选举，第二则是当 "),v("code",[_._v("Zookeeper")]),_._v(" 启动时需要进行系统的 "),v("code",[_._v("Leader")]),_._v(" 初始化选举。下面我先来介绍一下 "),v("code",[_._v("ZAB")]),_._v(" 是如何进行初始化选举的。")]),_._v(" "),v("p",[_._v("假设我们集群中有3台机器，那也就意味着我们需要两台以上同意（超过半数）。比如这个时候我们启动了 "),v("code",[_._v("server1")]),_._v(" ，它会首先 "),v("strong",[_._v("投票给自己")]),_._v(" ，投票内容为服务器的 "),v("code",[_._v("myid")]),_._v(" 和 "),v("code",[_._v("ZXID")]),_._v(" ，因为初始化所以 "),v("code",[_._v("ZXID")]),_._v(" 都为0，此时 "),v("code",[_._v("server1")]),_._v(" 发出的投票为 (1,0)。但此时 "),v("code",[_._v("server1")]),_._v(" 的投票仅为1，所以不能作为 "),v("code",[_._v("Leader")]),_._v(" ，此时还在选举阶段所以整个集群处于 "),v("strong",[v("code",[_._v("Looking")]),_._v(" 状态")]),_._v("。")]),_._v(" "),v("p",[_._v("接着 "),v("code",[_._v("server2")]),_._v(" 启动了，它首先也会将投票选给自己(2,0)，并将投票信息广播出去（"),v("code",[_._v("server1")]),_._v("也会，只是它那时没有其他的服务器了），"),v("code",[_._v("server1")]),_._v(" 在收到 "),v("code",[_._v("server2")]),_._v(" 的投票信息后会将投票信息与自己的作比较。"),v("strong",[_._v("首先它会比较 "),v("code",[_._v("ZXID")]),_._v(" ，"),v("code",[_._v("ZXID")]),_._v(" 大的优先为 "),v("code",[_._v("Leader")]),_._v("，如果相同则比较 "),v("code",[_._v("myid")]),_._v("，"),v("code",[_._v("myid")]),_._v(" 大的优先作为 "),v("code",[_._v("Leader")])]),_._v("。所以此时"),v("code",[_._v("server1")]),_._v(" 发现 "),v("code",[_._v("server2")]),_._v(" 更适合做 "),v("code",[_._v("Leader")]),_._v("，它就会将自己的投票信息更改为(2,0)然后再广播出去，之后"),v("code",[_._v("server2")]),_._v(" 收到之后发现和自己的一样无需做更改，并且自己的 "),v("strong",[_._v("投票已经超过半数")]),_._v(" ，则 "),v("strong",[_._v("确定 "),v("code",[_._v("server2")]),_._v(" 为 "),v("code",[_._v("Leader")])]),_._v("，"),v("code",[_._v("server1")]),_._v(" 也会将自己服务器设置为 "),v("code",[_._v("Following")]),_._v(" 变为 "),v("code",[_._v("Follower")]),_._v("。整个服务器就从 "),v("code",[_._v("Looking")]),_._v(" 变为了正常状态。")]),_._v(" "),v("p",[_._v("当 "),v("code",[_._v("server3")]),_._v(" 启动发现集群没有处于 "),v("code",[_._v("Looking")]),_._v(" 状态时，它会直接以 "),v("code",[_._v("Follower")]),_._v(" 的身份加入集群。")]),_._v(" "),v("p",[_._v("还是前面三个 "),v("code",[_._v("server")]),_._v(" 的例子，如果在整个集群运行的过程中 "),v("code",[_._v("server2")]),_._v(" 挂了，那么整个集群会如何重新选举 "),v("code",[_._v("Leader")]),_._v(" 呢？其实和初始化选举差不多。")]),_._v(" "),v("p",[_._v("首先毫无疑问的是剩下的两个 "),v("code",[_._v("Follower")]),_._v(" 会将自己的状态 "),v("strong",[_._v("从 "),v("code",[_._v("Following")]),_._v(" 变为 "),v("code",[_._v("Looking")]),_._v(" 状态")]),_._v(" ，然后每个 "),v("code",[_._v("server")]),_._v(" 会向初始化投票一样首先给自己投票（这不过这里的 "),v("code",[_._v("zxid")]),_._v(" 可能不是0了，这里为了方便随便取个数字）。")]),_._v(" "),v("p",[_._v("假设 "),v("code",[_._v("server1")]),_._v(" 给自己投票为(1,99)，然后广播给其他 "),v("code",[_._v("server")]),_._v("，"),v("code",[_._v("server3")]),_._v(" 首先也会给自己投票(3,95)，然后也广播给其他 "),v("code",[_._v("server")]),_._v("。"),v("code",[_._v("server1")]),_._v(" 和 "),v("code",[_._v("server3")]),_._v(" 此时会收到彼此的投票信息，和一开始选举一样，他们也会比较自己的投票和收到的投票（"),v("code",[_._v("zxid")]),_._v(" 大的优先，如果相同那么就 "),v("code",[_._v("myid")]),_._v(" 大的优先）。这个时候 "),v("code",[_._v("server1")]),_._v(" 收到了 "),v("code",[_._v("server3")]),_._v(" 的投票发现没自己的合适故不变，"),v("code",[_._v("server3")]),_._v(" 收到 "),v("code",[_._v("server1")]),_._v(" 的投票结果后发现比自己的合适于是更改投票为(1,99)然后广播出去，最后 "),v("code",[_._v("server1")]),_._v(" 收到了发现自己的投票已经超过半数就把自己设为 "),v("code",[_._v("Leader")]),_._v("，"),v("code",[_._v("server3")]),_._v(" 也随之变为 "),v("code",[_._v("Follower")]),_._v("。")]),_._v(" "),v("blockquote",[v("p",[_._v("请注意 "),v("code",[_._v("ZooKeeper")]),_._v(" 为什么要设置奇数个结点？比如这里我们是三个，挂了一个我们还能正常工作，挂了两个我们就不能正常工作了（已经没有超过半数的节点数了，所以无法进行投票等操作了）。而假设我们现在有四个，挂了一个也能工作，"),v("strong",[_._v("但是挂了两个也不能正常工作了")]),_._v("，这是和三个一样的，而三个比四个还少一个，带来的效益是一样的，所以 "),v("code",[_._v("Zookeeper")]),_._v(" 推荐奇数个 "),v("code",[_._v("server")]),_._v(" 。")])]),_._v(" "),v("p",[_._v("那么说完了 "),v("code",[_._v("ZAB")]),_._v(" 中的 "),v("code",[_._v("Leader")]),_._v(" 选举方式之后我们再来了解一下 "),v("strong",[_._v("崩溃恢复")]),_._v(" 是什么玩意？")]),_._v(" "),v("p",[_._v("其实主要就是 "),v("strong",[_._v("当集群中有机器挂了，我们整个集群如何保证数据一致性？")])]),_._v(" "),v("p",[_._v("如果只是 "),v("code",[_._v("Follower")]),_._v(" 挂了，而且挂的没超过半数的时候，因为我们一开始讲了在 "),v("code",[_._v("Leader")]),_._v(" 中会维护队列，所以不用担心后面的数据没接收到导致数据不一致性。")]),_._v(" "),v("p",[_._v("如果 "),v("code",[_._v("Leader")]),_._v(" 挂了那就麻烦了，我们肯定需要先暂停服务变为 "),v("code",[_._v("Looking")]),_._v(" 状态然后进行 "),v("code",[_._v("Leader")]),_._v(" 的重新选举（上面我讲过了），但这个就要分为两种情况了，分别是 "),v("strong",[_._v("确保已经被Leader提交的提案最终能够被所有的Follower提交")]),_._v(" 和 "),v("strong",[_._v("跳过那些已经被丢弃的提案")]),_._v(" 。")]),_._v(" "),v("p",[_._v("确保已经被Leader提交的提案最终能够被所有的Follower提交是什么意思呢？")]),_._v(" "),v("p",[_._v("假设 "),v("code",[_._v("Leader (server2)")]),_._v(" 发送 "),v("code",[_._v("commit")]),_._v(" 请求（忘了请看上面的消息广播模式），他发送给了 "),v("code",[_._v("server3")]),_._v("，然后要发给 "),v("code",[_._v("server1")]),_._v(" 的时候突然挂了。这个时候重新选举的时候我们如果把 "),v("code",[_._v("server1")]),_._v(" 作为 "),v("code",[_._v("Leader")]),_._v(" 的话，那么肯定会产生数据不一致性，因为 "),v("code",[_._v("server3")]),_._v(" 肯定会提交刚刚 "),v("code",[_._v("server2")]),_._v(" 发送的 "),v("code",[_._v("commit")]),_._v(" 请求的提案，而 "),v("code",[_._v("server1")]),_._v(" 根本没收到所以会丢弃。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/ffcb12c6fb2bad76ac7105696655e85c.png",alt:"崩溃恢复"}})]),_._v(" "),v("p",[_._v("那怎么解决呢？")]),_._v(" "),v("p",[_._v("聪明的同学肯定会质疑，"),v("strong",[_._v("这个时候 "),v("code",[_._v("server1")]),_._v(" 已经不可能成为 "),v("code",[_._v("Leader")]),_._v(" 了，因为 "),v("code",[_._v("server1")]),_._v(" 和 "),v("code",[_._v("server3")]),_._v(" 进行投票选举的时候会比较 "),v("code",[_._v("ZXID")]),_._v(" ，而此时 "),v("code",[_._v("server3")]),_._v(" 的 "),v("code",[_._v("ZXID")]),_._v(" 肯定比 "),v("code",[_._v("server1")]),_._v(" 的大了")]),_._v("。(不理解可以看前面的选举算法)")]),_._v(" "),v("p",[_._v("那么跳过那些已经被丢弃的提案又是什么意思呢？")]),_._v(" "),v("p",[_._v("假设 "),v("code",[_._v("Leader (server2)")]),_._v(" 此时同意了提案N1，自身提交了这个事务并且要发送给所有 "),v("code",[_._v("Follower")]),_._v(" 要 "),v("code",[_._v("commit")]),_._v(" 的请求，却在这个时候挂了，此时肯定要重新进行 "),v("code",[_._v("Leader")]),_._v(" 的选举，比如说此时选 "),v("code",[_._v("server1")]),_._v(" 为 "),v("code",[_._v("Leader")]),_._v(" （这无所谓）。但是过了一会，这个 "),v("strong",[_._v("挂掉的 "),v("code",[_._v("Leader")]),_._v(" 又重新恢复了")]),_._v(" ，此时它肯定会作为 "),v("code",[_._v("Follower")]),_._v(" 的身份进入集群中，需要注意的是刚刚 "),v("code",[_._v("server2")]),_._v(" 已经同意提交了提案N1，但其他 "),v("code",[_._v("server")]),_._v(" 并没有收到它的 "),v("code",[_._v("commit")]),_._v(" 信息，所以其他 "),v("code",[_._v("server")]),_._v(" 不可能再提交这个提案N1了，这样就会出现数据不一致性问题了，所以 "),v("strong",[_._v("该提案N1最终需要被抛弃掉")]),_._v(" 。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/abb6efc7d4df9c82b162cbecb129a6e3.png",alt:"崩溃恢复"}})]),_._v(" "),v("h2",{attrs:{id:"_6-zookeeper的几个理论知识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-zookeeper的几个理论知识"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_6-zookeeper%E7%9A%84%E5%87%A0%E4%B8%AA%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86"}},[_._v("#")]),_._v(" 6. Zookeeper的几个理论知识")]),_._v(" "),v("p",[_._v("了解了 "),v("code",[_._v("ZAB")]),_._v(" 协议还不够，它仅仅是 "),v("code",[_._v("Zookeeper")]),_._v(" 内部实现的一种方式，而我们如何通过 "),v("code",[_._v("Zookeeper")]),_._v(" 去做一些典型的应用场景呢？比如说集群管理，分布式锁，"),v("code",[_._v("Master")]),_._v(" 选举等等。")]),_._v(" "),v("p",[_._v("这就涉及到如何使用 "),v("code",[_._v("Zookeeper")]),_._v(" 了，但在使用之前我们还需要掌握几个概念。比如 "),v("code",[_._v("Zookeeper")]),_._v(" 的 "),v("strong",[_._v("数据模型")]),_._v(" 、"),v("strong",[_._v("会话机制")]),_._v("、"),v("strong",[_._v("ACL")]),_._v("、"),v("strong",[_._v("Watcher机制")]),_._v(" 等等。")]),_._v(" "),v("h3",{attrs:{id:"_6-1-数据模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-数据模型"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_6-1-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B"}},[_._v("#")]),_._v(" 6.1. 数据模型")]),_._v(" "),v("p",[v("code",[_._v("zookeeper")]),_._v(" 数据存储结构与标准的 "),v("code",[_._v("Unix")]),_._v(" 文件系统非常相似，都是在根节点下挂很多子节点(树型)。但是 "),v("code",[_._v("zookeeper")]),_._v(" 中没有文件系统中目录与文件的概念，而是 "),v("strong",[_._v("使用了 "),v("code",[_._v("znode")]),_._v(" 作为数据节点")]),_._v(" 。"),v("code",[_._v("znode")]),_._v(" 是 "),v("code",[_._v("zookeeper")]),_._v(" 中的最小数据单元，每个 "),v("code",[_._v("znode")]),_._v(" 上都可以保存数据，同时还可以挂载子节点，形成一个树形化命名空间。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/8f35dba8c44c4a10d81e3395df971ce7.png",alt:"zk数据模型"}})]),_._v(" "),v("p",[_._v("每个 "),v("code",[_._v("znode")]),_._v(" 都有自己所属的 "),v("strong",[_._v("节点类型")]),_._v(" 和 "),v("strong",[_._v("节点状态")]),_._v("。")]),_._v(" "),v("p",[_._v("其中节点类型可以分为 "),v("strong",[_._v("持久节点")]),_._v("、"),v("strong",[_._v("持久顺序节点")]),_._v("、"),v("strong",[_._v("临时节点")]),_._v(" 和 "),v("strong",[_._v("临时顺序节点")]),_._v("。")]),_._v(" "),v("ul",[v("li",[_._v("持久节点：一旦创建就一直存在，直到将其删除。")]),_._v(" "),v("li",[_._v("持久顺序节点：一个父节点可以为其子节点 "),v("strong",[_._v("维护一个创建的先后顺序")]),_._v(" ，这个顺序体现在 "),v("strong",[_._v("节点名称")]),_._v(" 上，是节点名称后自动添加一个由 10 位数字组成的数字串，从 0 开始计数。")]),_._v(" "),v("li",[_._v("临时节点：临时节点的生命周期是与 "),v("strong",[_._v("客户端会话")]),_._v(" 绑定的，"),v("strong",[_._v("会话消失则节点消失")]),_._v(" 。临时节点 "),v("strong",[_._v("只能做叶子节点")]),_._v(" ，不能创建子节点。")]),_._v(" "),v("li",[_._v("临时顺序节点：父节点可以创建一个维持了顺序的临时节点(和前面的持久顺序性节点一样)。")])]),_._v(" "),v("p",[_._v("节点状态中包含了很多节点的属性比如 "),v("code",[_._v("czxid")]),_._v(" 、"),v("code",[_._v("mzxid")]),_._v(" 等等，在 "),v("code",[_._v("zookeeper")]),_._v(" 中是使用 "),v("code",[_._v("Stat")]),_._v(" 这个类来维护的。下面我列举一些属性解释。")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("czxid")]),_._v("："),v("code",[_._v("Created ZXID")]),_._v("，该数据节点被 "),v("strong",[_._v("创建")]),_._v(" 时的事务ID。")]),_._v(" "),v("li",[v("code",[_._v("mzxid")]),_._v("："),v("code",[_._v("Modified ZXID")]),_._v("，节点 "),v("strong",[_._v("最后一次被更新时")]),_._v(" 的事务ID。")]),_._v(" "),v("li",[v("code",[_._v("ctime")]),_._v("："),v("code",[_._v("Created Time")]),_._v("，该节点被创建的时间。")]),_._v(" "),v("li",[v("code",[_._v("mtime")]),_._v("： "),v("code",[_._v("Modified Time")]),_._v("，该节点最后一次被修改的时间。")]),_._v(" "),v("li",[v("code",[_._v("version")]),_._v("：节点的版本号。")]),_._v(" "),v("li",[v("code",[_._v("cversion")]),_._v("："),v("strong",[_._v("子节点")]),_._v(" 的版本号。")]),_._v(" "),v("li",[v("code",[_._v("aversion")]),_._v("：节点的 "),v("code",[_._v("ACL")]),_._v(" 版本号。")]),_._v(" "),v("li",[v("code",[_._v("ephemeralOwner")]),_._v("：创建该节点的会话的 "),v("code",[_._v("sessionID")]),_._v(" ，如果该节点为持久节点，该值为0。")]),_._v(" "),v("li",[v("code",[_._v("dataLength")]),_._v("：节点数据内容的长度。")]),_._v(" "),v("li",[v("code",[_._v("numChildre")]),_._v("：该节点的子节点个数，如果为临时节点为0。")]),_._v(" "),v("li",[v("code",[_._v("pzxid")]),_._v("：该节点子节点列表最后一次被修改时的事务ID，注意是子节点的 "),v("strong",[_._v("列表")]),_._v(" ，不是内容。")])]),_._v(" "),v("h3",{attrs:{id:"_6-2-会话"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-会话"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_6-2-%E4%BC%9A%E8%AF%9D"}},[_._v("#")]),_._v(" 6.2. 会话")]),_._v(" "),v("p",[_._v("我想这个对于后端开发的朋友肯定不陌生，不就是 "),v("code",[_._v("session")]),_._v(" 吗？只不过 "),v("code",[_._v("zk")]),_._v(" 客户端和服务端是通过 "),v("strong",[v("code",[_._v("TCP")]),_._v(" 长连接")]),_._v(" 维持的会话机制，其实对于会话来说你可以理解为 "),v("strong",[_._v("保持连接状态")]),_._v(" 。")]),_._v(" "),v("p",[_._v("在 "),v("code",[_._v("zookeeper")]),_._v(" 中，会话还有对应的事件，比如 "),v("code",[_._v("CONNECTION_LOSS 连接丢失事件")]),_._v(" 、"),v("code",[_._v("SESSION_MOVED 会话转移事件")]),_._v(" 、"),v("code",[_._v("SESSION_EXPIRED 会话超时失效事件")]),_._v(" 。")]),_._v(" "),v("h3",{attrs:{id:"_6-3-acl"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-acl"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_6-3-acl"}},[_._v("#")]),_._v(" 6.3. ACL")]),_._v(" "),v("p",[v("code",[_._v("ACL")]),_._v(" 为 "),v("code",[_._v("Access Control Lists")]),_._v(" ，它是一种权限控制。在 "),v("code",[_._v("zookeeper")]),_._v(" 中定义了5种权限，它们分别为：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("CREATE")]),_._v(" ：创建子节点的权限。")]),_._v(" "),v("li",[v("code",[_._v("READ")]),_._v("：获取节点数据和子节点列表的权限。")]),_._v(" "),v("li",[v("code",[_._v("WRITE")]),_._v("：更新节点数据的权限。")]),_._v(" "),v("li",[v("code",[_._v("DELETE")]),_._v("：删除子节点的权限。")]),_._v(" "),v("li",[v("code",[_._v("ADMIN")]),_._v("：设置节点 ACL 的权限。")])]),_._v(" "),v("h3",{attrs:{id:"_6-4-watcher机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-watcher机制"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_6-4-watcher%E6%9C%BA%E5%88%B6"}},[_._v("#")]),_._v(" 6.4. Watcher机制")]),_._v(" "),v("p",[v("code",[_._v("Watcher")]),_._v(" 为事件监听器，是 "),v("code",[_._v("zk")]),_._v(" 非常重要的一个特性，很多功能都依赖于它，它有点类似于订阅的方式，即客户端向服务端 "),v("strong",[_._v("注册")]),_._v(" 指定的 "),v("code",[_._v("watcher")]),_._v(" ，当服务端符合了 "),v("code",[_._v("watcher")]),_._v(" 的某些事件或要求则会 "),v("strong",[_._v("向客户端发送事件通知")]),_._v(" ，客户端收到通知后找到自己定义的 "),v("code",[_._v("Watcher")]),_._v(" 然后 "),v("strong",[_._v("执行相应的回调方法")]),_._v(" 。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/241ab8cc37571034fa984322b753c7ba.png",alt:"watcher机制"}})]),_._v(" "),v("h2",{attrs:{id:"_7-zookeeper的几个典型应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-zookeeper的几个典型应用场景"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_7-zookeeper%E7%9A%84%E5%87%A0%E4%B8%AA%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF"}},[_._v("#")]),_._v(" 7. Zookeeper的几个典型应用场景")]),_._v(" "),v("p",[_._v("前面说了这么多的理论知识，你可能听得一头雾水，这些玩意有啥用？能干啥事？别急，听我慢慢道来。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/9c9bd2a892e23e0b7582370c50117d8c.png",alt:"img"}})]),_._v(" "),v("h3",{attrs:{id:"_7-1-选主"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-选主"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_7-1-%E9%80%89%E4%B8%BB"}},[_._v("#")]),_._v(" 7.1. 选主")]),_._v(" "),v("p",[_._v("还记得上面我们的所说的临时节点吗？因为 "),v("code",[_._v("Zookeeper")]),_._v(" 的强一致性，能够很好地在保证 "),v("strong",[_._v("在高并发的情况下保证节点创建的全局唯一性")]),_._v(" (即无法重复创建同样的节点)。")]),_._v(" "),v("p",[_._v("利用这个特性，我们可以 "),v("strong",[_._v("让多个客户端创建一个指定的节点")]),_._v(" ，创建成功的就是 "),v("code",[_._v("master")]),_._v("。")]),_._v(" "),v("p",[_._v("但是，如果这个 "),v("code",[_._v("master")]),_._v(" 挂了怎么办？？？")]),_._v(" "),v("p",[_._v("你想想为什么我们要创建临时节点？还记得临时节点的生命周期吗？"),v("code",[_._v("master")]),_._v(" 挂了是不是代表会话断了？会话断了是不是意味着这个节点没了？还记得 "),v("code",[_._v("watcher")]),_._v(" 吗？我们是不是可以 "),v("strong",[_._v("让其他不是 "),v("code",[_._v("master")]),_._v(" 的节点监听节点的状态")]),_._v(" ，比如说我们监听这个临时节点的父节点，如果子节点个数变了就代表 "),v("code",[_._v("master")]),_._v(" 挂了，这个时候我们 "),v("strong",[_._v("触发回调函数进行重新选举")]),_._v(" ，或者我们直接监听节点的状态，我们可以通过节点是否已经失去连接来判断 "),v("code",[_._v("master")]),_._v(" 是否挂了等等。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/a94707028c5581c815f72fba0f50f43a.png",alt:"选主"}})]),_._v(" "),v("p",[_._v("总的来说，我们可以完全 "),v("strong",[_._v("利用 临时节点、节点状态 和 "),v("code",[_._v("watcher")]),_._v(" 来实现选主的功能")]),_._v("，临时节点主要用来选举，节点状态和"),v("code",[_._v("watcher")]),_._v(" 可以用来判断 "),v("code",[_._v("master")]),_._v(" 的活性和进行重新选举。")]),_._v(" "),v("h3",{attrs:{id:"_7-2-分布式锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-分布式锁"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_7-2-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81"}},[_._v("#")]),_._v(" 7.2. 分布式锁")]),_._v(" "),v("p",[_._v("分布式锁的实现方式有很多种，比如 "),v("code",[_._v("Redis")]),_._v(" 、数据库 、"),v("code",[_._v("zookeeper")]),_._v(" 等。个人认为 "),v("code",[_._v("zookeeper")]),_._v(" 在实现分布式锁这方面是非常非常简单的。")]),_._v(" "),v("p",[_._v("上面我们已经提到过了 "),v("strong",[_._v("zk在高并发的情况下保证节点创建的全局唯一性")]),_._v("，这玩意一看就知道能干啥了。实现互斥锁呗，又因为能在分布式的情况下，所以能实现分布式锁呗。")]),_._v(" "),v("p",[_._v("如何实现呢？这玩意其实跟选主基本一样，我们也可以利用临时节点的创建来实现。")]),_._v(" "),v("p",[_._v("首先肯定是如何获取锁，因为创建节点的唯一性，我们可以让多个客户端同时创建一个临时节点，"),v("strong",[_._v("创建成功的就说明获取到了锁")]),_._v(" 。然后没有获取到锁的客户端也像上面选主的非主节点创建一个 "),v("code",[_._v("watcher")]),_._v(" 进行节点状态的监听，如果这个互斥锁被释放了（可能获取锁的客户端宕机了，或者那个客户端主动释放了锁）可以调用回调函数重新获得锁。")]),_._v(" "),v("blockquote",[v("p",[v("code",[_._v("zk")]),_._v(" 中不需要向 "),v("code",[_._v("redis")]),_._v(" 那样考虑锁得不到释放的问题了，因为当客户端挂了，节点也挂了，锁也释放了。是不是很简单？")])]),_._v(" "),v("p",[_._v("那能不能使用 "),v("code",[_._v("zookeeper")]),_._v(" 同时实现 "),v("strong",[_._v("共享锁和独占锁")]),_._v(" 呢？答案是可以的，不过稍微有点复杂而已。")]),_._v(" "),v("p",[_._v("还记得 "),v("strong",[_._v("有序的节点")]),_._v(" 吗？")]),_._v(" "),v("p",[_._v("这个时候我规定所有创建节点必须有序，当你是读请求（要获取共享锁）的话，如果 "),v("strong",[_._v("没有比自己更小的节点，或比自己小的节点都是读请求")]),_._v(" ，则可以获取到读锁，然后就可以开始读了。"),v("strong",[_._v("若比自己小的节点中有写请求")]),_._v(" ，则当前客户端无法获取到读锁，只能等待前面的写请求完成。")]),_._v(" "),v("p",[_._v("如果你是写请求（获取独占锁），若 "),v("strong",[_._v("没有比自己更小的节点")]),_._v(" ，则表示当前客户端可以直接获取到写锁，对数据进行修改。若发现 "),v("strong",[_._v("有比自己更小的节点，无论是读操作还是写操作，当前客户端都无法获取到写锁")]),_._v(" ，等待所有前面的操作完成。")]),_._v(" "),v("p",[_._v("这就很好地同时实现了共享锁和独占锁，当然还有优化的地方，比如当一个锁得到释放它会通知所有等待的客户端从而造成 "),v("strong",[_._v("羊群效应")]),_._v(" 。此时你可以通过让等待的节点只监听他们前面的节点。")]),_._v(" "),v("p",[_._v("具体怎么做呢？其实也很简单，你可以让 "),v("strong",[_._v("读请求监听比自己小的最后一个写请求节点，写请求只监听比自己小的最后一个节点")]),_._v(" ，感兴趣的小伙伴可以自己去研究一下。")]),_._v(" "),v("h3",{attrs:{id:"_7-3-命名服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-命名服务"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_7-3-%E5%91%BD%E5%90%8D%E6%9C%8D%E5%8A%A1"}},[_._v("#")]),_._v(" 7.3. 命名服务")]),_._v(" "),v("p",[_._v("如何给一个对象设置ID，大家可能都会想到 "),v("code",[_._v("UUID")]),_._v("，但是 "),v("code",[_._v("UUID")]),_._v(" 最大的问题就在于它太长了。。。(太长不一定是好事，嘿嘿嘿)。那么在条件允许的情况下，我们能不能使用 "),v("code",[_._v("zookeeper")]),_._v(" 来实现呢？")]),_._v(" "),v("p",[_._v("我们之前提到过 "),v("code",[_._v("zookeeper")]),_._v(" 是通过 "),v("strong",[_._v("树形结构")]),_._v(" 来存储数据节点的，那也就是说，对于每个节点的 "),v("strong",[_._v("全路径")]),_._v("，它必定是唯一的，我们可以使用节点的全路径作为命名方式了。而且更重要的是，路径是我们可以自己定义的，这对于我们对有些有语意的对象的ID设置可以更加便于理解。")]),_._v(" "),v("h3",{attrs:{id:"_7-4-集群管理和注册中心"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-集群管理和注册中心"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"#_7-4-%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%92%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83"}},[_._v("#")]),_._v(" 7.4. 集群管理和注册中心")]),_._v(" "),v("p",[_._v("看到这里是不是觉得 "),v("code",[_._v("zookeeper")]),_._v(" 实在是太强大了，它怎么能这么能干！")]),_._v(" "),v("p",[_._v("别急，它能干的事情还很多呢。可能我们会有这样的需求，我们需要了解整个集群中有多少机器在工作，我们想对集群中的每台机器的运行时状态进行数据采集，对集群中机器进行上下线操作等等。")]),_._v(" "),v("p",[_._v("而 "),v("code",[_._v("zookeeper")]),_._v(" 天然支持的 "),v("code",[_._v("watcher")]),_._v(" 和 临时节点能很好的实现这些需求。我们可以为每条机器创建临时节点，并监控其父节点，如果子节点列表有变动（我们可能创建删除了临时节点），那么我们可以使用在其父节点绑定的 "),v("code",[_._v("watcher")]),_._v(" 进行状态监控和回调。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/6115820219c35c68bcb2c9a855ebace3.png",alt:"集群管理"}})]),_._v(" "),v("p",[_._v("至于注册中心也很简单，我们同样也是让 "),v("strong",[_._v("服务提供者")]),_._v(" 在 "),v("code",[_._v("zookeeper")]),_._v(" 中创建一个临时节点并且将自己的 "),v("code",[_._v("ip、port、调用方式")]),_._v(" 写入节点，当 "),v("strong",[_._v("服务消费者")]),_._v(" 需要进行调用的时候会 "),v("strong",[_._v("通过注册中心找到相应的服务的地址列表(IP端口什么的)")]),_._v(" ，并缓存到本地(方便以后调用)，当消费者调用服务时，不会再去请求注册中心，而是直接通过负载均衡算法从地址列表中取一个服务提供者的服务器调用服务。")]),_._v(" "),v("p",[_._v("当服务提供者的某台服务器宕机或下线时，相应的地址会从服务提供者地址列表中移除。同时，注册中心会将新的服务地址列表发送给服务消费者的机器并缓存在消费者本机（当然你可以让消费者进行节点监听，我记得 "),v("code",[_._v("Eureka")]),_._v(" 会先试错，然后再更新）。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/0b5b3911a7c2dae23391d17c91416b29.png",alt:"注册中心"}})])])}),[],!1,null,null,null);v.default=r.exports}}]);